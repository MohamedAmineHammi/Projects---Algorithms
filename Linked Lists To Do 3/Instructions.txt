Linked Lists To Do 3
Here, as usual, is the definition of our node class. Note that going forward we will refer to this as SLNode instead of ListNode, to avoid ambiguity about what kind of list will contain this node.


function SLNode(value) {
    this.val = value;
    this.next = null;
    this.front = function() { ... }
    // more functions here
}copy
SList: Second Largest Value
Given a pointer to the first node in a singly linked list, return the second-largest value contained in the list.

Provided two pointers to independent linked lists, ‘zip’ the two lists together by alternating nodes. Start with the first list, and return the new combined list.



Zip SLists
Si se proporcionan dos punteros a listas vinculadas independientes, "comprime" las dos listas mediante la alternancia de nodos. Comienza con la primera lista y devuelve la nueva lista combinada.



Dedupe SList
Remove nodes with duplicate values. Following this call, all remaining nodes should have unique values. Retain only first instance of each value.



Dedupe SList Without Buffer
Can you accomplish deduplication without using a secondary buffer? What are the performance ramifications? How long would you expect the function to take to finish if it was sent an SList of length 5 million?