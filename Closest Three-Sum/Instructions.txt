Closest Three-Sum
Let’s work through three challenges/solutions. Each includes a sequence of small improvements, along with narration to take you through the optimization thought process. You will benefit most if you create fully coded solutions for each step of the way, before referring to the next page.



Closest Three-Sum (Series)
Given an assorted array of numbers, plus a target number, return the three array elements whose sum is closest to target. For example, given ([1,8,5,10,2,4,3],6), return [1,2,3].

 

How did you test your solution? Before optimizing, ensure your code works. Did you try inputs with less than three elements? Do you ensure array elements can only appear once in the resulting trio? The inputs ([1,4,6,7],3) should return [1,4,6], not [1,1,1]. If you have correctness confidence, continue.

 

Next, examine your solution’s performance, and characterize it with Big-O. How much space does it require? What about run-time performance? Did you make unnecessary assumptions? Below we list one possible answer to this challenge. What is your analysis of this solution?

// Calculate sums, determine which are closest to target, and return them.
function closestThreeSum1(arr, target) {
    var sums = [];
    for (var idx1 = 0; idx1 < arr.length; idx1++)
    {
        sums[idx1] = [];
        for (var idx2 = 0; idx2 < arr.length; idx2++)
        {
            sums[idx1][idx2] = [];
            for (var idx3 = 0; idx3 < arr.length; idx3++)
            {
                sums[idx1][idx2][idx3] = arr[idx1] + arr[idx2] + arr[idx3];
            }
        }
    }
    var bestSum = Number.MAX_VALUE;
    var bestNums = [];
    for (var idx1 = 0; idx1 < arr.length; idx1++) {
        for (var idx2 = 0; idx2 < arr.length; idx2++) {
            for (var idx3 = 0; idx3 < arr.length; idx3++) {
                if ((target - sums[idx1][idx2][idx3]) < bestSum)
                {
                    bestSum = target - sums[idx1][idx2][idx3];
                    bestNums[0] = arr[idx1];
                    bestNums[1] = arr[idx2];
                    bestNums[2] = arr[idx3];
                }
            }
        }
    }
    return bestNums;
}

